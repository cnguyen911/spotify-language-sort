{"map":"{\"version\":3,\"sources\":[\"/Users/chrisnguyen/spotify-projectFinal/client/src/components/Login.js\",\"/Users/chrisnguyen/spotify-projectFinal/client/src/components/PlaylistCard.js\",\"/Users/chrisnguyen/spotify-projectFinal/client/src/services/spotifyService.js\",\"/Users/chrisnguyen/spotify-projectFinal/client/src/components/LanguageEditor.js\",\"/Users/chrisnguyen/spotify-projectFinal/client/src/components/LanguageSorter.js\",\"/Users/chrisnguyen/spotify-projectFinal/client/src/components/Dashboard.js\",\"/Users/chrisnguyen/spotify-projectFinal/client/src/services/apiService.js\",\"/Users/chrisnguyen/spotify-projectFinal/client/src/utils/auth.js\",\"/Users/chrisnguyen/spotify-projectFinal/client/src/App.js\",\"/Users/chrisnguyen/spotify-projectFinal/client/src/index.js\"],\"names\":[\"Login\",\"React\",\"createElement\",\"className\",\"onClick\",\"handleLogin\",\"window\",\"location\",\"href\",\"PlaylistCard\",\"_ref\",\"playlist\",\"onSelect\",\"playlistImage\",\"images\",\"length\",\"url\",\"handleClick\",\"src\",\"alt\",\"name\",\"tracks\",\"total\",\"spotifyService\",\"getUserPlaylists\",\"async\",\"axios\",\"get\",\"params\",\"access_token\",\"token\",\"data\",\"items\",\"error\",\"console\",\"analyzePlaylist\",\"playlistId\",\"createLanguagePlaylists\",\"originalPlaylistName\",\"tracksByLanguage\",\"post\",\"results\",\"commonLanguages\",\"LanguageEditor\",\"onSave\",\"onCancel\",\"editedTracks\",\"setEditedTracks\",\"useState\",\"Object\",\"entries\",\"forEach\",\"_ref2\",\"language\",\"languageTracks\",\"track\",\"id\",\"log\",\"allTracks\",\"values\",\"sortedLanguages\",\"sort\",\"a\",\"b\",\"localeCompare\",\"map\",\"key\",\"artists\",\"artist\",\"join\",\"value\",\"onChange\",\"e\",\"handleLanguageChange\",\"trackId\",\"newLanguage\",\"prev\",\"[object Object]\",\"target\",\"lang\",\"handleSave\",\"newTracksByLanguage\",\"push\",\"LanguageSorter\",\"onBack\",\"loading\",\"setLoading\",\"analyzing\",\"setAnalyzing\",\"creating\",\"setCreating\",\"setError\",\"playlistData\",\"setPlaylistData\",\"createdPlaylists\",\"setCreatedPlaylists\",\"showEditor\",\"setShowEditor\",\"editedTracksByLanguage\",\"setEditedTracksByLanguage\",\"useEffect\",\"displayTracksByLanguage\",\"handleEditorCancel\",\"Fragment\",\"handleEdit\",\"result\",\"rel\",\"playlistName\",\"trackCount\",\"trackData\",\"disabled\",\"Dashboard\",\"playlists\",\"setPlaylists\",\"selectedPlaylist\",\"setSelectedPlaylist\",\"fetchedPlaylists\",\"fetchPlaylists\",\"handlePlaylistSelect\",\"handleLogout\",\"localStorage\",\"removeItem\",\"handleBack\",\"getTokenFromUrl\",\"hashParams\",\"URLSearchParams\",\"search\",\"setTokens\",\"accessToken\",\"refreshToken\",\"expiresIn\",\"expiration\",\"Date\",\"now\",\"setItem\",\"JSON\",\"stringify\",\"refresh_token\",\"expires_in\",\"App\",\"setToken\",\"setRefreshToken\",\"setExpiresIn\",\"history\",\"pushState\",\"tokens\",\"parse\",\"getItem\",\"Router\",\"Routes\",\"Route\",\"path\",\"element\",\"ReactDOM\",\"createRoot\",\"document\",\"getElementById\",\"render\",\"StrictMode\"],\"mappings\":\"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\",\"sourcesContent\":[\"// client/src/components/Login.js\\nimport React from 'react';\\n\\nfunction Login() {\\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\\n\\n  const handleLogin = () => {\\n    window.location.href = `${API_URL}/spotify/login`;\\n  };\\n\\n  return (\\n    <div className=\\\"flex justify-center items-center min-h-screen bg-spotify-black\\\">\\n      <div className=\\\"bg-neutral p-8 rounded-lg shadow-lg max-w-md text-center\\\">\\n        <h2 className=\\\"text-2xl font-bold text-spotify-green mb-4\\\">Welcome to Language Sorter</h2>\\n        <p className=\\\"text-spotify-grey mb-6\\\">This app helps you organize your Spotify playlists by language. It will analyze your playlist and create separate playlists for each language detected.</p>\\n        <button \\n          className=\\\"bg-spotify-green hover:bg-green-500 text-white font-bold py-3 px-6 rounded-full transition-all\\\"\\n          onClick={handleLogin}\\n        >\\n          Login with Spotify\\n        </button>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default Login;\",\"import React from 'react';\\nimport './PlaylistCard.css';\\n\\nfunction PlaylistCard({ playlist, onSelect }) {\\n  const handleClick = () => {\\n    onSelect(playlist);\\n  };\\n\\n  const playlistImage = playlist.images && playlist.images.length > 0\\n    ? playlist.images[0].url\\n    : '/default-playlist.png';\\n\\n  return (\\n    <div className=\\\"playlist-card\\\" onClick={handleClick}>\\n      <div className=\\\"playlist-image\\\">\\n        <img src={playlistImage} alt={playlist.name} />\\n      </div>\\n      <div className=\\\"playlist-info\\\">\\n        <h3>{playlist.name}</h3>\\n        <p>{playlist.tracks.total} tracks</p>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default PlaylistCard;\",\"import axios from 'axios';\\n\\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\\n\\nexport const spotifyService = {\\n  getUserPlaylists: async (token) => {\\n    try {\\n      const response = await axios.get(`${API_URL}/spotify/playlists`, {\\n        params: { access_token: token }\\n      });\\n      return response.data.items;\\n    } catch (error) {\\n      console.error('Error fetching playlists:', error);\\n      throw error;\\n    }\\n  },\\n\\n  analyzePlaylist: async (playlistId, token) => {\\n    try {\\n      const response = await axios.get(`${API_URL}/spotify/playlist/${playlistId}`, {\\n        params: { access_token: token }\\n      });\\n      return response.data;\\n    } catch (error) {\\n      console.error('Error analyzing playlist:', error);\\n      throw error;\\n    }\\n  },\\n\\n  createLanguagePlaylists: async (token, originalPlaylistName, tracksByLanguage) => {\\n    try {\\n      const response = await axios.post(\\n        `${API_URL}/spotify/create-playlists`,\\n        {\\n          originalPlaylistName,\\n          tracksByLanguage\\n        },\\n        {\\n          params: { access_token: token }\\n        }\\n      );\\n      return response.data.results;\\n    } catch (error) {\\n      console.error('Error creating playlists:', error);\\n      throw error;\\n    }\\n  }\\n};\",\"import React, { useState } from 'react';\\nimport './LanguageEditor.css';\\n\\nconst commonLanguages = [\\n  'English', 'Spanish', 'French', 'German', 'Italian', 'Portuguese',\\n  'Japanese', 'Korean', 'Chinese', 'Vietnamese', 'Russian', 'Arabic', 'Hindi',\\n  'Thai', 'Dutch', 'Swedish', 'Norwegian', 'Danish', 'Finnish', 'Polish',\\n  'Czech', 'Hungarian', 'Romanian', 'Turkish', 'Greek', 'Ukrainian',\\n  'Bulgarian', 'Traditional Chinese', 'Bengali', 'Tamil', 'Telugu', 'Kannada',\\n  'Malayalam', 'Filipino', 'Indonesian'\\n];\\n\\nfunction LanguageEditor({ tracksByLanguage, onSave, onCancel }) {\\n  const [editedTracks, setEditedTracks] = useState(() => {\\n    const tracks = {};\\n    \\n    Object.entries(tracksByLanguage).forEach(([language, languageTracks]) => {\\n      languageTracks.forEach(track => {\\n        tracks[track.id] = {\\n          ...track,\\n          language\\n        };\\n      });\\n    });\\n    \\n    return tracks;\\n  });\\n\\n  console.log(\\\"Tracks by language received:\\\", tracksByLanguage);\\n  console.log(\\\"Initialized edited tracks:\\\", editedTracks);\\n\\n  const handleLanguageChange = (trackId, newLanguage) => {\\n    setEditedTracks(prev => ({\\n      ...prev,\\n      [trackId]: {\\n        ...prev[trackId],\\n        language: newLanguage\\n      }\\n    }));\\n  };\\n\\n  const handleSave = () => {\\n    const newTracksByLanguage = {};\\n    \\n    Object.values(editedTracks).forEach(track => {\\n      if (!newTracksByLanguage[track.language]) {\\n        newTracksByLanguage[track.language] = [];\\n      }\\n      newTracksByLanguage[track.language].push(track);\\n    });\\n    \\n    onSave(newTracksByLanguage);\\n  };\\n\\n  const allTracks = Object.values(editedTracks);\\n\\n  const sortedLanguages = [...commonLanguages].sort((a, b) => {\\n    if (a === 'Unknown') return 1;\\n    if (b === 'Unknown') return -1;\\n    if (a === 'Other') return 1;\\n    if (b === 'Other') return -1;\\n    return a.localeCompare(b);\\n  });\\n\\n  return (\\n    <div className=\\\"language-editor\\\">\\n      <h3>Edit Language Classifications</h3>\\n      <p>Review and correct language classifications for better playlist sorting.</p>\\n      \\n      <div className=\\\"track-list\\\">\\n        {allTracks.map(track => (\\n          <div key={track.id} className=\\\"track-item\\\">\\n            <div className=\\\"track-info\\\">\\n              <div className=\\\"track-name\\\">{track.name}</div>\\n              <div className=\\\"track-artists\\\">\\n                {track.artists.map(artist => artist.name).join(', ')}\\n              </div>\\n            </div>\\n            \\n            <div className=\\\"track-language\\\">\\n              <select \\n                value={track.language}\\n                onChange={(e) => handleLanguageChange(track.id, e.target.value)}\\n              >\\n                {sortedLanguages.map(lang => (\\n                  <option key={lang} value={lang}>{lang}</option>\\n                ))}\\n                <option value=\\\"Unknown\\\">Unknown</option>\\n                <option value=\\\"Other\\\">Other</option>\\n              </select>\\n            </div>\\n          </div>\\n        ))}\\n      </div>\\n      \\n      <div className=\\\"editor-actions\\\">\\n        <button className=\\\"cancel-button\\\" onClick={onCancel}>Cancel</button>\\n        <button className=\\\"save-button\\\" onClick={handleSave}>Save Changes</button>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default LanguageEditor;\",\"import React, { useState, useEffect } from 'react';\\nimport { spotifyService } from '../services/spotifyService';\\nimport LanguageEditor from './LanguageEditor';\\nimport './LanguageSorter.css';\\n\\nfunction LanguageSorter({ playlist, token, onBack }) {\\n  const [loading, setLoading] = useState(true);\\n  const [analyzing, setAnalyzing] = useState(false);\\n  const [creating, setCreating] = useState(false);\\n  const [error, setError] = useState(null);\\n  const [playlistData, setPlaylistData] = useState(null);\\n  const [createdPlaylists, setCreatedPlaylists] = useState([]);\\n  const [showEditor, setShowEditor] = useState(false);\\n  const [editedTracksByLanguage, setEditedTracksByLanguage] = useState(null);\\n\\n  useEffect(() => {\\n    const analyzePlaylist = async () => {\\n      try {\\n        setLoading(true);\\n        setAnalyzing(true);\\n        \\n        const data = await spotifyService.analyzePlaylist(playlist.id, token);\\n        console.log(\\\"Playlist data received:\\\", data); \\n        \\n        setPlaylistData(data);\\n        setLoading(false);\\n        setAnalyzing(false);\\n      } catch (error) {\\n        console.error('Error analyzing playlist:', error);\\n        setError('Failed to analyze playlist. Please try again.');\\n        setLoading(false);\\n        setAnalyzing(false);\\n      }\\n    };\\n\\n    analyzePlaylist();\\n  }, [playlist.id, token]);\\n\\n  const handleCreatePlaylists = async () => {\\n    try {\\n      setCreating(true);\\n      \\n      const trackData = editedTracksByLanguage || playlistData.tracksByLanguage;\\n      \\n      const results = await spotifyService.createLanguagePlaylists(\\n        token, \\n        playlist.name, \\n        trackData\\n      );\\n      \\n      setCreatedPlaylists(results);\\n      setCreating(false);\\n    } catch (error) {\\n      console.error('Error creating playlists:', error);\\n      setError('Failed to create language playlists. Please try again.');\\n      setCreating(false);\\n    }\\n  };\\n\\n  const handleEdit = () => {\\n    setShowEditor(true);\\n  };\\n\\n  const handleEditorSave = (newTracksByLanguage) => {\\n    setEditedTracksByLanguage(newTracksByLanguage);\\n    setShowEditor(false);\\n  };\\n\\n  const handleEditorCancel = () => {\\n    setShowEditor(false);\\n  };\\n\\n  if (loading) {\\n    return (\\n      <div className=\\\"language-sorter\\\">\\n        <button className=\\\"back-button\\\" onClick={onBack}>Back to Playlists</button>\\n        <h2>Analyzing \\\"{playlist.name}\\\"</h2>\\n        <div className=\\\"loading-spinner\\\"></div>\\n        <p>This may take a moment for larger playlists...</p>\\n      </div>\\n    );\\n  }\\n\\n  if (error) {\\n    return (\\n      <div className=\\\"language-sorter\\\">\\n        <button className=\\\"back-button\\\" onClick={onBack}>Back to Playlists</button>\\n        <div className=\\\"error\\\">{error}</div>\\n      </div>\\n    );\\n  }\\n\\n  const displayTracksByLanguage = editedTracksByLanguage || playlistData.tracksByLanguage;\\n\\n  return (\\n    <div className=\\\"language-sorter\\\">\\n      <button className=\\\"back-button\\\" onClick={onBack}>Back to Playlists</button>\\n      \\n      <h2>Playlist: {playlist.name}</h2>\\n      \\n      {analyzing ? (\\n        <div className=\\\"analyzing\\\">\\n          <div className=\\\"loading-spinner\\\"></div>\\n          <p>Analyzing languages in your playlist...</p>\\n        </div>\\n      ) : showEditor ? (\\n        <LanguageEditor\\n          tracksByLanguage={playlistData.tracksByLanguage}\\n          onSave={handleEditorSave}\\n          onCancel={handleEditorCancel}\\n        />\\n      ) : (\\n        <>\\n          <div className=\\\"language-summary\\\">\\n            <h3>Languages Detected</h3>\\n            <div className=\\\"language-list\\\">\\n              {Object.entries(displayTracksByLanguage).map(([language, tracks]) => (\\n                <div className=\\\"language-item\\\" key={language}>\\n                  <span className=\\\"language-name\\\">{language}</span>\\n                  <span className=\\\"language-count\\\">{tracks.length} tracks</span>\\n                </div>\\n              ))}\\n            </div>\\n            \\n            <div className=\\\"language-actions\\\">\\n              <button onClick={handleEdit} className=\\\"edit-button\\\">\\n                Edit Languages\\n              </button>\\n            </div>\\n          </div>\\n          \\n          {createdPlaylists.length > 0 ? (\\n            <div className=\\\"created-playlists\\\">\\n              <h3>Created Playlists</h3>\\n              <ul className=\\\"playlist-results\\\">\\n                {createdPlaylists.map(result => (\\n                  <li key={result.playlistId}>\\n                    <a \\n                      href={`https://open.spotify.com/playlist/${result.playlistId}`} \\n                      target=\\\"_blank\\\" \\n                      rel=\\\"noopener noreferrer\\\"\\n                    >\\n                      {result.playlistName}\\n                    </a>\\n                    <span className=\\\"track-count\\\">({result.trackCount} tracks)</span>\\n                  </li>\\n                ))}\\n              </ul>\\n            </div>\\n          ) : (\\n            <button \\n              className=\\\"create-button\\\" \\n              onClick={handleCreatePlaylists}\\n              disabled={creating}\\n            >\\n              {creating ? 'Creating Playlists...' : 'Create Language Playlists'}\\n            </button>\\n          )}\\n        </>\\n      )}\\n    </div>\\n  );\\n}\\n\\nexport default LanguageSorter;\",\"import React, { useState, useEffect } from 'react';\\nimport PlaylistCard from './PlaylistCard';\\nimport LanguageSorter from './LanguageSorter';\\nimport { spotifyService } from '../services/spotifyService';\\nimport './Dashboard.css';\\n\\nfunction Dashboard({ token }) {\\n  const [playlists, setPlaylists] = useState([]);\\n  const [loading, setLoading] = useState(true);\\n  const [error, setError] = useState(null);\\n  const [selectedPlaylist, setSelectedPlaylist] = useState(null);\\n\\n  useEffect(() => {\\n    const fetchPlaylists = async () => {\\n      try {\\n        setLoading(true);\\n        const fetchedPlaylists = await spotifyService.getUserPlaylists(token);\\n        setPlaylists(fetchedPlaylists);\\n        setLoading(false);\\n      } catch (error) {\\n        console.error('Error fetching playlists:', error);\\n        setError('Failed to load your playlists. Please try again.');\\n        setLoading(false);\\n      }\\n    };\\n\\n    fetchPlaylists();\\n  }, [token]);\\n\\n  const handlePlaylistSelect = (playlist) => {\\n    setSelectedPlaylist(playlist);\\n  };\\n\\n  const handleBack = () => {\\n    setSelectedPlaylist(null);\\n  };\\n\\n  const handleLogout = () => {\\n    localStorage.removeItem('spotify_tokens');\\n    window.location.href = '/';\\n  };\\n\\n  if (loading) {\\n    return <div className=\\\"loading\\\">Loading your playlists...</div>;\\n  }\\n\\n  if (error) {\\n    return <div className=\\\"error\\\">{error}</div>;\\n  }\\n\\n  return (\\n    <div className=\\\"dashboard\\\">\\n      <div className=\\\"dashboard-header\\\">\\n        <button className=\\\"logout-button\\\" onClick={handleLogout}>Logout</button>\\n      </div>\\n\\n      {selectedPlaylist ? (\\n        <LanguageSorter \\n          playlist={selectedPlaylist}\\n          token={token}\\n          onBack={handleBack}\\n        />\\n      ) : (\\n        <>\\n          <h2>Your Playlists</h2>\\n          <p>Select a playlist to sort by language:</p>\\n          \\n          <div className=\\\"playlists-grid\\\">\\n            {playlists.map(playlist => (\\n              <PlaylistCard \\n                key={playlist.id}\\n                playlist={playlist}\\n                onSelect={handlePlaylistSelect}\\n              />\\n            ))}\\n          </div>\\n        </>\\n      )}\\n    </div>\\n  );\\n}\\n\\nexport default Dashboard;\",\"import axios from 'axios';\\n\\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\\n\\nexport const apiService = {\\n  refreshToken: async (refreshToken) => {\\n    try {\\n      const response = await axios.get(`${API_URL}/spotify/refresh-token`, {\\n        params: { refresh_token: refreshToken }\\n      });\\n      return response.data;\\n    } catch (error) {\\n      console.error('Error refreshing token:', error);\\n      throw error;\\n    }\\n  }\\n};\",\"// client/src/utils/auth.js\\nimport { apiService } from '../services/apiService';\\n\\nexport const getTokenFromUrl = () => {\\n  const hashParams = new URLSearchParams(window.location.search);\\n  const params = {};\\n  \\n  for (const [key, value] of hashParams.entries()) {\\n    params[key] = value;\\n  }\\n  \\n  return params;\\n};\\n\\nexport const setTokens = (accessToken, refreshToken, expiresIn) => {\\n  const expiration = Date.now() + (expiresIn * 1000);\\n  \\n  localStorage.setItem('spotify_tokens', JSON.stringify({\\n    access_token: accessToken,\\n    refresh_token: refreshToken,\\n    expires_in: expiresIn,\\n    expiration\\n  }));\\n};\\n\\nexport const getTokens = () => {\\n  const tokens = JSON.parse(localStorage.getItem('spotify_tokens'));\\n  \\n  if (!tokens) return null;\\n  \\n  // Check if token is expired\\n  if (Date.now() > tokens.expiration) {\\n    // Refresh token\\n    refreshAccessToken(tokens.refresh_token);\\n    return null;\\n  }\\n  \\n  return tokens;\\n};\\n\\nexport const refreshAccessToken = async (refreshToken) => {\\n  try {\\n    const response = await apiService.refreshToken(refreshToken);\\n    \\n    const { access_token, expires_in } = response;\\n    \\n    // Update tokens in localStorage\\n    const tokens = JSON.parse(localStorage.getItem('spotify_tokens'));\\n    const expiration = Date.now() + (expires_in * 1000);\\n    \\n    localStorage.setItem('spotify_tokens', JSON.stringify({\\n      ...tokens,\\n      access_token,\\n      expires_in,\\n      expiration\\n    }));\\n    \\n    // Reload the page to use the new token\\n    window.location.reload();\\n  } catch (error) {\\n    console.error('Failed to refresh token:', error);\\n    // Clear tokens and redirect to login\\n    localStorage.removeItem('spotify_tokens');\\n    window.location.href = '/';\\n  }\\n};\",\"import React, { useState, useEffect } from 'react';\\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\\nimport Login from './components/Login';\\nimport Dashboard from './components/Dashboard';\\nimport { getTokenFromUrl, setTokens } from './utils/auth';\\nimport './App.css';\\n\\nfunction App() {\\n const [token, setToken] = useState(null);\\n const [refreshToken, setRefreshToken] = useState(null);\\n const [expiresIn, setExpiresIn] = useState(null);\\n\\n  useEffect(() => {\\n    const params = getTokenFromUrl();\\n    \\n    if (params.access_token) {\\n      setToken(params.access_token);\\n      setRefreshToken(params.refresh_token);\\n      setExpiresIn(params.expires_in);\\n      \\n      setTokens(\\n        params.access_token,\\n        params.refresh_token,\\n        params.expires_in\\n      );\\n      \\n      window.history.pushState({}, null, '/');\\n    } else {\\n      const tokens = JSON.parse(localStorage.getItem('spotify_tokens'));\\n      if (tokens && tokens.access_token) {\\n        setToken(tokens.access_token);\\n        setRefreshToken(tokens.refresh_token);\\n        setExpiresIn(tokens.expires_in);\\n      }\\n    }\\n  }, []);\\n\\n  return (\\n    <Router>\\n      <div className=\\\"App\\\">\\n        <header className=\\\"App-header\\\">\\n          <h1>Spotify Language Playlist Sorter</h1>\\n        </header>\\n        \\n        <main>\\n          <Routes>\\n            <Route \\n              path=\\\"/\\\" \\n              element={token ? <Dashboard token={token} /> : <Login />} \\n            />\\n          </Routes>\\n        </main>\\n        \\n        <footer>\\n          <p>© 2025 Spotify Language Playlist Sorter</p>\\n        </footer>\\n      </div>\\n    </Router>\\n  );\\n}\\n\\nexport default App;\",\"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport './index.css';\\nimport './animations.css'; \\nimport App from './App';\\n\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,,,,,,,,,,,,,,,function(e,a,t){e.exports=t(32)},,,,,,function(e,a,t){},function(e,a,t){},function(e,a,t){},,,,,function(e,a,t){},function(e,a,t){},function(e,a,t){},function(e,a,t){},function(e,a,t){\"use strict\";t.r(a);var l=t(0),n=t.n(l),s=t(12),c=t.n(s),r=(t(21),t(22),t(13)),o=t(2);var i=function(){return n.a.createElement(\"div\",{className:\"flex justify-center items-center min-h-screen bg-spotify-black\"},n.a.createElement(\"div\",{className:\"bg-neutral p-8 rounded-lg shadow-lg max-w-md text-center\"},n.a.createElement(\"h2\",{className:\"text-2xl font-bold text-spotify-green mb-4\"},\"Welcome to Language Sorter\"),n.a.createElement(\"p\",{className:\"text-spotify-grey mb-6\"},\"This app helps you organize your Spotify playlists by language. It will analyze your playlist and create separate playlists for each language detected.\"),n.a.createElement(\"button\",{className:\"bg-spotify-green hover:bg-green-500 text-white font-bold py-3 px-6 rounded-full transition-all\",onClick:()=>{window.location.href=\"http://localhost:5000/api/spotify/login\"}},\"Login with Spotify\")))};t(23);var m=function(e){let{playlist:a,onSelect:t}=e;const l=a.images&&a.images.length>0?a.images[0].url:\"/default-playlist.png\";return n.a.createElement(\"div\",{className:\"playlist-card\",onClick:()=>{t(a)}},n.a.createElement(\"div\",{className:\"playlist-image\"},n.a.createElement(\"img\",{src:l,alt:a.name})),n.a.createElement(\"div\",{className:\"playlist-info\"},n.a.createElement(\"h3\",null,a.name),n.a.createElement(\"p\",null,a.tracks.total,\" tracks\")))},u=t(33);const g={getUserPlaylists:async e=>{try{return(await u.a.get(\"http://localhost:5000/api/spotify/playlists\",{params:{access_token:e}})).data.items}catch(a){throw console.error(\"Error fetching playlists:\",a),a}},analyzePlaylist:async(e,a)=>{try{return(await u.a.get(`http://localhost:5000/api/spotify/playlist/${e}`,{params:{access_token:a}})).data}catch(t){throw console.error(\"Error analyzing playlist:\",t),t}},createLanguagePlaylists:async(e,a,t)=>{try{return(await u.a.post(\"http://localhost:5000/api/spotify/create-playlists\",{originalPlaylistName:a,tracksByLanguage:t},{params:{access_token:e}})).data.results}catch(l){throw console.error(\"Error creating playlists:\",l),l}}};t(28);const y=[\"English\",\"Spanish\",\"French\",\"German\",\"Italian\",\"Portuguese\",\"Japanese\",\"Korean\",\"Chinese\",\"Vietnamese\",\"Russian\",\"Arabic\",\"Hindi\",\"Thai\",\"Dutch\",\"Swedish\",\"Norwegian\",\"Danish\",\"Finnish\",\"Polish\",\"Czech\",\"Hungarian\",\"Romanian\",\"Turkish\",\"Greek\",\"Ukrainian\",\"Bulgarian\",\"Traditional Chinese\",\"Bengali\",\"Tamil\",\"Telugu\",\"Kannada\",\"Malayalam\",\"Filipino\",\"Indonesian\"];var p=function(e){let{tracksByLanguage:a,onSave:t,onCancel:s}=e;const[c,r]=Object(l.useState)(()=>{const e={};return Object.entries(a).forEach(a=>{let[t,l]=a;l.forEach(a=>{e[a.id]={...a,language:t}})}),e});console.log(\"Tracks by language received:\",a),console.log(\"Initialized edited tracks:\",c);const o=Object.values(c),i=[...y].sort((e,a)=>\"Unknown\"===e?1:\"Unknown\"===a?-1:\"Other\"===e?1:\"Other\"===a?-1:e.localeCompare(a));return n.a.createElement(\"div\",{className:\"language-editor\"},n.a.createElement(\"h3\",null,\"Edit Language Classifications\"),n.a.createElement(\"p\",null,\"Review and correct language classifications for better playlist sorting.\"),n.a.createElement(\"div\",{className:\"track-list\"},o.map(e=>n.a.createElement(\"div\",{key:e.id,className:\"track-item\"},n.a.createElement(\"div\",{className:\"track-info\"},n.a.createElement(\"div\",{className:\"track-name\"},e.name),n.a.createElement(\"div\",{className:\"track-artists\"},e.artists.map(e=>e.name).join(\", \"))),n.a.createElement(\"div\",{className:\"track-language\"},n.a.createElement(\"select\",{value:e.language,onChange:a=>((e,a)=>{r(t=>({...t,[e]:{...t[e],language:a}}))})(e.id,a.target.value)},i.map(e=>n.a.createElement(\"option\",{key:e,value:e},e)),n.a.createElement(\"option\",{value:\"Unknown\"},\"Unknown\"),n.a.createElement(\"option\",{value:\"Other\"},\"Other\")))))),n.a.createElement(\"div\",{className:\"editor-actions\"},n.a.createElement(\"button\",{className:\"cancel-button\",onClick:s},\"Cancel\"),n.a.createElement(\"button\",{className:\"save-button\",onClick:()=>{const e={};Object.values(c).forEach(a=>{e[a.language]||(e[a.language]=[]),e[a.language].push(a)}),t(e)}},\"Save Changes\")))};t(29);var d=function(e){let{playlist:a,token:t,onBack:s}=e;const[c,r]=Object(l.useState)(!0),[o,i]=Object(l.useState)(!1),[m,u]=Object(l.useState)(!1),[y,d]=Object(l.useState)(null),[E,h]=Object(l.useState)(null),[k,f]=Object(l.useState)([]),[b,v]=Object(l.useState)(!1),[N,S]=Object(l.useState)(null);if(Object(l.useEffect)(()=>{(async()=>{try{r(!0),i(!0);const e=await g.analyzePlaylist(a.id,t);console.log(\"Playlist data received:\",e),h(e),r(!1),i(!1)}catch(y){console.error(\"Error analyzing playlist:\",y),d(\"Failed to analyze playlist. Please try again.\"),r(!1),i(!1)}})()},[a.id,t]),c)return n.a.createElement(\"div\",{className:\"language-sorter\"},n.a.createElement(\"button\",{className:\"back-button\",onClick:s},\"Back to Playlists\"),n.a.createElement(\"h2\",null,'Analyzing \"',a.name,'\"'),n.a.createElement(\"div\",{className:\"loading-spinner\"}),n.a.createElement(\"p\",null,\"This may take a moment for larger playlists...\"));if(y)return n.a.createElement(\"div\",{className:\"language-sorter\"},n.a.createElement(\"button\",{className:\"back-button\",onClick:s},\"Back to Playlists\"),n.a.createElement(\"div\",{className:\"error\"},y));const w=N||E.tracksByLanguage;return n.a.createElement(\"div\",{className:\"language-sorter\"},n.a.createElement(\"button\",{className:\"back-button\",onClick:s},\"Back to Playlists\"),n.a.createElement(\"h2\",null,\"Playlist: \",a.name),o?n.a.createElement(\"div\",{className:\"analyzing\"},n.a.createElement(\"div\",{className:\"loading-spinner\"}),n.a.createElement(\"p\",null,\"Analyzing languages in your playlist...\")):b?n.a.createElement(p,{tracksByLanguage:E.tracksByLanguage,onSave:e=>{S(e),v(!1)},onCancel:()=>{v(!1)}}):n.a.createElement(n.a.Fragment,null,n.a.createElement(\"div\",{className:\"language-summary\"},n.a.createElement(\"h3\",null,\"Languages Detected\"),n.a.createElement(\"div\",{className:\"language-list\"},Object.entries(w).map(e=>{let[a,t]=e;return n.a.createElement(\"div\",{className:\"language-item\",key:a},n.a.createElement(\"span\",{className:\"language-name\"},a),n.a.createElement(\"span\",{className:\"language-count\"},t.length,\" tracks\"))})),n.a.createElement(\"div\",{className:\"language-actions\"},n.a.createElement(\"button\",{onClick:()=>{v(!0)},className:\"edit-button\"},\"Edit Languages\"))),k.length>0?n.a.createElement(\"div\",{className:\"created-playlists\"},n.a.createElement(\"h3\",null,\"Created Playlists\"),n.a.createElement(\"ul\",{className:\"playlist-results\"},k.map(e=>n.a.createElement(\"li\",{key:e.playlistId},n.a.createElement(\"a\",{href:`https://open.spotify.com/playlist/${e.playlistId}`,target:\"_blank\",rel:\"noopener noreferrer\"},e.playlistName),n.a.createElement(\"span\",{className:\"track-count\"},\"(\",e.trackCount,\" tracks)\"))))):n.a.createElement(\"button\",{className:\"create-button\",onClick:async()=>{try{u(!0);const e=N||E.tracksByLanguage,l=await g.createLanguagePlaylists(t,a.name,e);f(l),u(!1)}catch(y){console.error(\"Error creating playlists:\",y),d(\"Failed to create language playlists. Please try again.\"),u(!1)}},disabled:m},m?\"Creating Playlists...\":\"Create Language Playlists\")))};t(30);var E=function(e){let{token:a}=e;const[t,s]=Object(l.useState)([]),[c,r]=Object(l.useState)(!0),[o,i]=Object(l.useState)(null),[u,y]=Object(l.useState)(null);Object(l.useEffect)(()=>{(async()=>{try{r(!0);const e=await g.getUserPlaylists(a);s(e),r(!1)}catch(o){console.error(\"Error fetching playlists:\",o),i(\"Failed to load your playlists. Please try again.\"),r(!1)}})()},[a]);const p=e=>{y(e)};return c?n.a.createElement(\"div\",{className:\"loading\"},\"Loading your playlists...\"):o?n.a.createElement(\"div\",{className:\"error\"},o):n.a.createElement(\"div\",{className:\"dashboard\"},n.a.createElement(\"div\",{className:\"dashboard-header\"},n.a.createElement(\"button\",{className:\"logout-button\",onClick:()=>{localStorage.removeItem(\"spotify_tokens\"),window.location.href=\"/\"}},\"Logout\")),u?n.a.createElement(d,{playlist:u,token:a,onBack:()=>{y(null)}}):n.a.createElement(n.a.Fragment,null,n.a.createElement(\"h2\",null,\"Your Playlists\"),n.a.createElement(\"p\",null,\"Select a playlist to sort by language:\"),n.a.createElement(\"div\",{className:\"playlists-grid\"},t.map(e=>n.a.createElement(m,{key:e.id,playlist:e,onSelect:p})))))};const h=()=>{const e=new URLSearchParams(window.location.search),a={};for(const[t,l]of e.entries())a[t]=l;return a},k=(e,a,t)=>{const l=Date.now()+1e3*t;localStorage.setItem(\"spotify_tokens\",JSON.stringify({access_token:e,refresh_token:a,expires_in:t,expiration:l}))};t(31);var f=function(){const[e,a]=Object(l.useState)(null),[t,s]=Object(l.useState)(null),[c,m]=Object(l.useState)(null);return Object(l.useEffect)(()=>{const e=h();if(e.access_token)a(e.access_token),s(e.refresh_token),m(e.expires_in),k(e.access_token,e.refresh_token,e.expires_in),window.history.pushState({},null,\"/\");else{const e=JSON.parse(localStorage.getItem(\"spotify_tokens\"));e&&e.access_token&&(a(e.access_token),s(e.refresh_token),m(e.expires_in))}},[]),n.a.createElement(r.a,null,n.a.createElement(\"div\",{className:\"App\"},n.a.createElement(\"header\",{className:\"App-header\"},n.a.createElement(\"h1\",null,\"Spotify Language Playlist Sorter\")),n.a.createElement(\"main\",null,n.a.createElement(o.c,null,n.a.createElement(o.a,{path:\"/\",element:e?n.a.createElement(E,{token:e}):n.a.createElement(i,null)}))),n.a.createElement(\"footer\",null,n.a.createElement(\"p\",null,\"\\xa9 2025 Spotify Language Playlist Sorter\"))))};c.a.createRoot(document.getElementById(\"root\")).render(n.a.createElement(n.a.StrictMode,null,n.a.createElement(f,null)))}],[[15,1,2]]]);","extractedComments":[]}