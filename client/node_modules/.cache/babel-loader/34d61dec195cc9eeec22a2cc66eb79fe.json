{"ast":null,"code":"var _jsxFileName = \"/Users/chrisnguyen/spotify-projectFinal/client/src/components/Dashboard.js\";\nimport React, { useState, useEffect } from 'react';\nimport PlaylistCard from './PlaylistCard';\nimport LanguageSorter from './LanguageSorter';\nimport { spotifyService } from '../services/spotifyService';\nimport './Dashboard.css';\nfunction Dashboard({\n  token\n}) {\n  const [playlists, setPlaylists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedPlaylist, setSelectedPlaylist] = useState(null);\n  useEffect(() => {\n    const fetchPlaylists = async () => {\n      try {\n        setLoading(true);\n        const fetchedPlaylists = await spotifyService.getUserPlaylists(token);\n        setPlaylists(fetchedPlaylists);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching playlists:', error);\n        setError('Failed to load your playlists. Please try again.');\n        setLoading(false);\n      }\n    };\n    fetchPlaylists();\n  }, [token]);\n  const handlePlaylistSelect = playlist => {\n    setSelectedPlaylist(playlist);\n  };\n  const handleBack = () => {\n    setSelectedPlaylist(null);\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('spotify_tokens');\n    window.location.href = '/';\n  };\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 12\n      }\n    }, \"Loading your playlists...\");\n  }\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 12\n      }\n    }, error);\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"logout-button\",\n    onClick: handleLogout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"Logout\")), selectedPlaylist ? /*#__PURE__*/React.createElement(LanguageSorter, {\n    playlist: selectedPlaylist,\n    token: token,\n    onBack: handleBack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"Your Playlists\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, \"Select a playlist to sort by language:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"playlists-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, playlists.map(playlist => /*#__PURE__*/React.createElement(PlaylistCard, {\n    key: playlist.id,\n    playlist: playlist,\n    onSelect: handlePlaylistSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  })))));\n}\nexport default Dashboard;","map":{"version":3,"names":["React","useState","useEffect","PlaylistCard","LanguageSorter","spotifyService","Dashboard","token","playlists","setPlaylists","loading","setLoading","error","setError","selectedPlaylist","setSelectedPlaylist","fetchPlaylists","fetchedPlaylists","getUserPlaylists","console","handlePlaylistSelect","playlist","handleBack","handleLogout","localStorage","removeItem","window","location","href","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onBack","Fragment","map","key","id","onSelect"],"sources":["/Users/chrisnguyen/spotify-projectFinal/client/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PlaylistCard from './PlaylistCard';\nimport LanguageSorter from './LanguageSorter';\nimport { spotifyService } from '../services/spotifyService';\nimport './Dashboard.css';\n\nfunction Dashboard({ token }) {\n  const [playlists, setPlaylists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedPlaylist, setSelectedPlaylist] = useState(null);\n\n  useEffect(() => {\n    const fetchPlaylists = async () => {\n      try {\n        setLoading(true);\n        const fetchedPlaylists = await spotifyService.getUserPlaylists(token);\n        setPlaylists(fetchedPlaylists);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching playlists:', error);\n        setError('Failed to load your playlists. Please try again.');\n        setLoading(false);\n      }\n    };\n\n    fetchPlaylists();\n  }, [token]);\n\n  const handlePlaylistSelect = (playlist) => {\n    setSelectedPlaylist(playlist);\n  };\n\n  const handleBack = () => {\n    setSelectedPlaylist(null);\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem('spotify_tokens');\n    window.location.href = '/';\n  };\n\n  if (loading) {\n    return <div className=\"loading\">Loading your playlists...</div>;\n  }\n\n  if (error) {\n    return <div className=\"error\">{error}</div>;\n  }\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"dashboard-header\">\n        <button className=\"logout-button\" onClick={handleLogout}>Logout</button>\n      </div>\n\n      {selectedPlaylist ? (\n        <LanguageSorter \n          playlist={selectedPlaylist}\n          token={token}\n          onBack={handleBack}\n        />\n      ) : (\n        <>\n          <h2>Your Playlists</h2>\n          <p>Select a playlist to sort by language:</p>\n          \n          <div className=\"playlists-grid\">\n            {playlists.map(playlist => (\n              <PlaylistCard \n                key={playlist.id}\n                playlist={playlist}\n                onSelect={handlePlaylistSelect}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}