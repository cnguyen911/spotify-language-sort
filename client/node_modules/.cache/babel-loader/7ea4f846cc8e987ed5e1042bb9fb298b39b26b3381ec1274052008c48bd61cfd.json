{"ast":null,"code":"var _jsxFileName = \"/Users/chrisnguyen/spotify-projectFinal/client/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PlaylistCard from './PlaylistCard';\nimport LanguageSorter from './LanguageSorter';\nimport { spotifyService } from '../services/spotifyService';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Dashboard({\n  token\n}) {\n  _s();\n  const [playlists, setPlaylists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedPlaylist, setSelectedPlaylist] = useState(null);\n  useEffect(() => {\n    const fetchPlaylists = async () => {\n      try {\n        setLoading(true);\n        const fetchedPlaylists = await spotifyService.getUserPlaylists(token);\n        setPlaylists(fetchedPlaylists);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching playlists:', error);\n        setError('Failed to load your playlists. Please try again.');\n        setLoading(false);\n      }\n    };\n    fetchPlaylists();\n  }, [token]);\n  const handlePlaylistSelect = playlist => {\n    setSelectedPlaylist(playlist);\n  };\n  const handleBack = () => {\n    setSelectedPlaylist(null);\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('spotify_tokens');\n    window.location.href = '/';\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading your playlists...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-header\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout-button\",\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), selectedPlaylist ? /*#__PURE__*/_jsxDEV(LanguageSorter, {\n      playlist: selectedPlaylist,\n      token: token,\n      onBack: handleBack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Playlists\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select a playlist to sort by language:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlists-grid\",\n        children: playlists.map(playlist => /*#__PURE__*/_jsxDEV(PlaylistCard, {\n          playlist: playlist,\n          onSelect: handlePlaylistSelect\n        }, playlist.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"sJiY78IO3h+01YV/fEKB56klCYA=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","PlaylistCard","LanguageSorter","spotifyService","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","token","_s","playlists","setPlaylists","loading","setLoading","error","setError","selectedPlaylist","setSelectedPlaylist","fetchPlaylists","fetchedPlaylists","getUserPlaylists","console","handlePlaylistSelect","playlist","handleBack","handleLogout","localStorage","removeItem","window","location","href","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onBack","map","onSelect","id","_c","$RefreshReg$"],"sources":["/Users/chrisnguyen/spotify-projectFinal/client/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PlaylistCard from './PlaylistCard';\nimport LanguageSorter from './LanguageSorter';\nimport { spotifyService } from '../services/spotifyService';\nimport './Dashboard.css';\n\nfunction Dashboard({ token }) {\n  const [playlists, setPlaylists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedPlaylist, setSelectedPlaylist] = useState(null);\n\n  useEffect(() => {\n    const fetchPlaylists = async () => {\n      try {\n        setLoading(true);\n        const fetchedPlaylists = await spotifyService.getUserPlaylists(token);\n        setPlaylists(fetchedPlaylists);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching playlists:', error);\n        setError('Failed to load your playlists. Please try again.');\n        setLoading(false);\n      }\n    };\n\n    fetchPlaylists();\n  }, [token]);\n\n  const handlePlaylistSelect = (playlist) => {\n    setSelectedPlaylist(playlist);\n  };\n\n  const handleBack = () => {\n    setSelectedPlaylist(null);\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem('spotify_tokens');\n    window.location.href = '/';\n  };\n\n  if (loading) {\n    return <div className=\"loading\">Loading your playlists...</div>;\n  }\n\n  if (error) {\n    return <div className=\"error\">{error}</div>;\n  }\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"dashboard-header\">\n        <button className=\"logout-button\" onClick={handleLogout}>Logout</button>\n      </div>\n\n      {selectedPlaylist ? (\n        <LanguageSorter \n          playlist={selectedPlaylist}\n          token={token}\n          onBack={handleBack}\n        />\n      ) : (\n        <>\n          <h2>Your Playlists</h2>\n          <p>Select a playlist to sort by language:</p>\n          \n          <div className=\"playlists-grid\">\n            {playlists.map(playlist => (\n              <PlaylistCard \n                key={playlist.id}\n                playlist={playlist}\n                onSelect={handlePlaylistSelect}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}