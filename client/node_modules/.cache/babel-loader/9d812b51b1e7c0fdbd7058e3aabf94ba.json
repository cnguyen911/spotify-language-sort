{"ast":null,"code":"// client/src/utils/auth.js\nimport { apiService } from '../services/apiService';\nexport const getTokenFromUrl = () => {\n  const hashParams = new URLSearchParams(window.location.search);\n  const params = {};\n  for (const [key, value] of hashParams.entries()) {\n    params[key] = value;\n  }\n  return params;\n};\nexport const setTokens = (accessToken, refreshToken, expiresIn) => {\n  const expiration = Date.now() + expiresIn * 1000;\n  localStorage.setItem('spotify_tokens', JSON.stringify({\n    access_token: accessToken,\n    refresh_token: refreshToken,\n    expires_in: expiresIn,\n    expiration\n  }));\n};\nexport const getTokens = () => {\n  const tokens = JSON.parse(localStorage.getItem('spotify_tokens'));\n  if (!tokens) return null;\n\n  // Check if token is expired\n  if (Date.now() > tokens.expiration) {\n    // Refresh token\n    refreshAccessToken(tokens.refresh_token);\n    return null;\n  }\n  return tokens;\n};\nexport const refreshAccessToken = async refreshToken => {\n  try {\n    const response = await apiService.refreshToken(refreshToken);\n    const {\n      access_token,\n      expires_in\n    } = response;\n\n    // Update tokens in localStorage\n    const tokens = JSON.parse(localStorage.getItem('spotify_tokens'));\n    const expiration = Date.now() + expires_in * 1000;\n    localStorage.setItem('spotify_tokens', JSON.stringify({\n      ...tokens,\n      access_token,\n      expires_in,\n      expiration\n    }));\n\n    // Reload the page to use the new token\n    window.location.reload();\n  } catch (error) {\n    console.error('Failed to refresh token:', error);\n    // Clear tokens and redirect to login\n    localStorage.removeItem('spotify_tokens');\n    window.location.href = '/';\n  }\n};","map":{"version":3,"names":["apiService","getTokenFromUrl","hashParams","URLSearchParams","window","location","search","params","key","value","entries","setTokens","accessToken","refreshToken","expiresIn","expiration","Date","now","localStorage","setItem","JSON","stringify","access_token","refresh_token","expires_in","getTokens","tokens","parse","getItem","refreshAccessToken","response","reload","error","console","removeItem","href"],"sources":["/Users/chrisnguyen/spotify-projectFinal/client/src/utils/auth.js"],"sourcesContent":["// client/src/utils/auth.js\nimport { apiService } from '../services/apiService';\n\nexport const getTokenFromUrl = () => {\n  const hashParams = new URLSearchParams(window.location.search);\n  const params = {};\n  \n  for (const [key, value] of hashParams.entries()) {\n    params[key] = value;\n  }\n  \n  return params;\n};\n\nexport const setTokens = (accessToken, refreshToken, expiresIn) => {\n  const expiration = Date.now() + (expiresIn * 1000);\n  \n  localStorage.setItem('spotify_tokens', JSON.stringify({\n    access_token: accessToken,\n    refresh_token: refreshToken,\n    expires_in: expiresIn,\n    expiration\n  }));\n};\n\nexport const getTokens = () => {\n  const tokens = JSON.parse(localStorage.getItem('spotify_tokens'));\n  \n  if (!tokens) return null;\n  \n  // Check if token is expired\n  if (Date.now() > tokens.expiration) {\n    // Refresh token\n    refreshAccessToken(tokens.refresh_token);\n    return null;\n  }\n  \n  return tokens;\n};\n\nexport const refreshAccessToken = async (refreshToken) => {\n  try {\n    const response = await apiService.refreshToken(refreshToken);\n    \n    const { access_token, expires_in } = response;\n    \n    // Update tokens in localStorage\n    const tokens = JSON.parse(localStorage.getItem('spotify_tokens'));\n    const expiration = Date.now() + (expires_in * 1000);\n    \n    localStorage.setItem('spotify_tokens', JSON.stringify({\n      ...tokens,\n      access_token,\n      expires_in,\n      expiration\n    }));\n    \n    // Reload the page to use the new token\n    window.location.reload();\n  } catch (error) {\n    console.error('Failed to refresh token:', error);\n    // Clear tokens and redirect to login\n    localStorage.removeItem('spotify_tokens');\n    window.location.href = '/';\n  }\n};"],"mappings":"AAAA;AACA,SAASA,UAAU,QAAQ,wBAAwB;AAEnD,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;EAC9D,MAAMC,MAAM,GAAG,CAAC,CAAC;EAEjB,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIP,UAAU,CAACQ,OAAO,CAAC,CAAC,EAAE;IAC/CH,MAAM,CAACC,GAAG,CAAC,GAAGC,KAAK;EACrB;EAEA,OAAOF,MAAM;AACf,CAAC;AAED,OAAO,MAAMI,SAAS,GAAGA,CAACC,WAAW,EAAEC,YAAY,EAAEC,SAAS,KAAK;EACjE,MAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAIH,SAAS,GAAG,IAAK;EAElDI,YAAY,CAACC,OAAO,CAAC,gBAAgB,EAAEC,IAAI,CAACC,SAAS,CAAC;IACpDC,YAAY,EAAEV,WAAW;IACzBW,aAAa,EAAEV,YAAY;IAC3BW,UAAU,EAAEV,SAAS;IACrBC;EACF,CAAC,CAAC,CAAC;AACL,CAAC;AAED,OAAO,MAAMU,SAAS,GAAGA,CAAA,KAAM;EAC7B,MAAMC,MAAM,GAAGN,IAAI,CAACO,KAAK,CAACT,YAAY,CAACU,OAAO,CAAC,gBAAgB,CAAC,CAAC;EAEjE,IAAI,CAACF,MAAM,EAAE,OAAO,IAAI;;EAExB;EACA,IAAIV,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGS,MAAM,CAACX,UAAU,EAAE;IAClC;IACAc,kBAAkB,CAACH,MAAM,CAACH,aAAa,CAAC;IACxC,OAAO,IAAI;EACb;EAEA,OAAOG,MAAM;AACf,CAAC;AAED,OAAO,MAAMG,kBAAkB,GAAG,MAAOhB,YAAY,IAAK;EACxD,IAAI;IACF,MAAMiB,QAAQ,GAAG,MAAM9B,UAAU,CAACa,YAAY,CAACA,YAAY,CAAC;IAE5D,MAAM;MAAES,YAAY;MAAEE;IAAW,CAAC,GAAGM,QAAQ;;IAE7C;IACA,MAAMJ,MAAM,GAAGN,IAAI,CAACO,KAAK,CAACT,YAAY,CAACU,OAAO,CAAC,gBAAgB,CAAC,CAAC;IACjE,MAAMb,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAIO,UAAU,GAAG,IAAK;IAEnDN,YAAY,CAACC,OAAO,CAAC,gBAAgB,EAAEC,IAAI,CAACC,SAAS,CAAC;MACpD,GAAGK,MAAM;MACTJ,YAAY;MACZE,UAAU;MACVT;IACF,CAAC,CAAC,CAAC;;IAEH;IACAX,MAAM,CAACC,QAAQ,CAAC0B,MAAM,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD;IACAd,YAAY,CAACgB,UAAU,CAAC,gBAAgB,CAAC;IACzC9B,MAAM,CAACC,QAAQ,CAAC8B,IAAI,GAAG,GAAG;EAC5B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}