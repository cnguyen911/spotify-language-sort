{"version":3,"sources":["components/Login.js","components/PlaylistCard.js","services/spotifyService.js","components/LanguageEditor.js","components/LanguageSorter.js","components/Dashboard.js","services/apiService.js","utils/auth.js","App.js","index.js"],"names":["Login","React","createElement","className","onClick","handleLogin","window","location","href","PlaylistCard","_ref","playlist","onSelect","playlistImage","images","length","url","handleClick","src","alt","name","tracks","total","spotifyService","getUserPlaylists","async","axios","get","params","access_token","token","data","items","error","console","analyzePlaylist","playlistId","createLanguagePlaylists","originalPlaylistName","tracksByLanguage","post","results","commonLanguages","LanguageEditor","onSave","onCancel","editedTracks","setEditedTracks","useState","Object","entries","forEach","_ref2","language","languageTracks","track","id","log","allTracks","values","sortedLanguages","sort","a","b","localeCompare","map","key","artists","artist","join","value","onChange","e","handleLanguageChange","trackId","newLanguage","prev","[object Object]","target","lang","handleSave","newTracksByLanguage","push","LanguageSorter","onBack","loading","setLoading","analyzing","setAnalyzing","creating","setCreating","setError","playlistData","setPlaylistData","createdPlaylists","setCreatedPlaylists","showEditor","setShowEditor","editedTracksByLanguage","setEditedTracksByLanguage","useEffect","displayTracksByLanguage","handleEditorCancel","Fragment","handleEdit","result","rel","playlistName","trackCount","trackData","disabled","Dashboard","playlists","setPlaylists","selectedPlaylist","setSelectedPlaylist","fetchedPlaylists","fetchPlaylists","handlePlaylistSelect","handleLogout","localStorage","removeItem","handleBack","getTokenFromUrl","hashParams","URLSearchParams","search","setTokens","accessToken","refreshToken","expiresIn","expiration","Date","now","setItem","JSON","stringify","refresh_token","expires_in","App","setToken","setRefreshToken","setExpiresIn","history","pushState","tokens","parse","getItem","Router","Routes","Route","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.2ebe68a7.chunk.js","sourcesContent":["// client/src/components/Login.js\nimport React from 'react';\n\nfunction Login() {\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n  const handleLogin = () => {\n    window.location.href = `${API_URL}/spotify/login`;\n  };\n\n  return (\n    <div className=\"flex justify-center items-center min-h-screen bg-spotify-black\">\n      <div className=\"bg-neutral p-8 rounded-lg shadow-lg max-w-md text-center\">\n        <h2 className=\"text-2xl font-bold text-spotify-green mb-4\">Welcome to Language Sorter</h2>\n        <p className=\"text-spotify-grey mb-6\">This app helps you organize your Spotify playlists by language. It will analyze your playlist and create separate playlists for each language detected.</p>\n        <button \n          className=\"bg-spotify-green hover:bg-green-500 text-white font-bold py-3 px-6 rounded-full transition-all\"\n          onClick={handleLogin}\n        >\n          Login with Spotify\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;","import React from 'react';\nimport './PlaylistCard.css';\n\nfunction PlaylistCard({ playlist, onSelect }) {\n  const handleClick = () => {\n    onSelect(playlist);\n  };\n\n  const playlistImage = playlist.images && playlist.images.length > 0\n    ? playlist.images[0].url\n    : '/default-playlist.png';\n\n  return (\n    <div className=\"playlist-card\" onClick={handleClick}>\n      <div className=\"playlist-image\">\n        <img src={playlistImage} alt={playlist.name} />\n      </div>\n      <div className=\"playlist-info\">\n        <h3>{playlist.name}</h3>\n        <p>{playlist.tracks.total} tracks</p>\n      </div>\n    </div>\n  );\n}\n\nexport default PlaylistCard;","import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nexport const spotifyService = {\n  getUserPlaylists: async (token) => {\n    try {\n      const response = await axios.get(`${API_URL}/spotify/playlists`, {\n        params: { access_token: token }\n      });\n      return response.data.items;\n    } catch (error) {\n      console.error('Error fetching playlists:', error);\n      throw error;\n    }\n  },\n\n  analyzePlaylist: async (playlistId, token) => {\n    try {\n      const response = await axios.get(`${API_URL}/spotify/playlist/${playlistId}`, {\n        params: { access_token: token }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing playlist:', error);\n      throw error;\n    }\n  },\n\n  createLanguagePlaylists: async (token, originalPlaylistName, tracksByLanguage) => {\n    try {\n      const response = await axios.post(\n        `${API_URL}/spotify/create-playlists`,\n        {\n          originalPlaylistName,\n          tracksByLanguage\n        },\n        {\n          params: { access_token: token }\n        }\n      );\n      return response.data.results;\n    } catch (error) {\n      console.error('Error creating playlists:', error);\n      throw error;\n    }\n  }\n};","import React, { useState } from 'react';\nimport './LanguageEditor.css';\n\nconst commonLanguages = [\n  'English', 'Spanish', 'French', 'German', 'Italian', 'Portuguese',\n  'Japanese', 'Korean', 'Chinese', 'Vietnamese', 'Russian', 'Arabic', 'Hindi',\n  'Thai', 'Dutch', 'Swedish', 'Norwegian', 'Danish', 'Finnish', 'Polish',\n  'Czech', 'Hungarian', 'Romanian', 'Turkish', 'Greek', 'Ukrainian',\n  'Bulgarian', 'Traditional Chinese', 'Bengali', 'Tamil', 'Telugu', 'Kannada',\n  'Malayalam', 'Filipino', 'Indonesian'\n];\n\nfunction LanguageEditor({ tracksByLanguage, onSave, onCancel }) {\n  const [editedTracks, setEditedTracks] = useState(() => {\n    const tracks = {};\n    \n    Object.entries(tracksByLanguage).forEach(([language, languageTracks]) => {\n      languageTracks.forEach(track => {\n        tracks[track.id] = {\n          ...track,\n          language\n        };\n      });\n    });\n    \n    return tracks;\n  });\n\n  console.log(\"Tracks by language received:\", tracksByLanguage);\n  console.log(\"Initialized edited tracks:\", editedTracks);\n\n  const handleLanguageChange = (trackId, newLanguage) => {\n    setEditedTracks(prev => ({\n      ...prev,\n      [trackId]: {\n        ...prev[trackId],\n        language: newLanguage\n      }\n    }));\n  };\n\n  const handleSave = () => {\n    const newTracksByLanguage = {};\n    \n    Object.values(editedTracks).forEach(track => {\n      if (!newTracksByLanguage[track.language]) {\n        newTracksByLanguage[track.language] = [];\n      }\n      newTracksByLanguage[track.language].push(track);\n    });\n    \n    onSave(newTracksByLanguage);\n  };\n\n  const allTracks = Object.values(editedTracks);\n\n  const sortedLanguages = [...commonLanguages].sort((a, b) => {\n    if (a === 'Unknown') return 1;\n    if (b === 'Unknown') return -1;\n    if (a === 'Other') return 1;\n    if (b === 'Other') return -1;\n    return a.localeCompare(b);\n  });\n\n  return (\n    <div className=\"language-editor\">\n      <h3>Edit Language Classifications</h3>\n      <p>Review and correct language classifications for better playlist sorting.</p>\n      \n      <div className=\"track-list\">\n        {allTracks.map(track => (\n          <div key={track.id} className=\"track-item\">\n            <div className=\"track-info\">\n              <div className=\"track-name\">{track.name}</div>\n              <div className=\"track-artists\">\n                {track.artists.map(artist => artist.name).join(', ')}\n              </div>\n            </div>\n            \n            <div className=\"track-language\">\n              <select \n                value={track.language}\n                onChange={(e) => handleLanguageChange(track.id, e.target.value)}\n              >\n                {sortedLanguages.map(lang => (\n                  <option key={lang} value={lang}>{lang}</option>\n                ))}\n                <option value=\"Unknown\">Unknown</option>\n                <option value=\"Other\">Other</option>\n              </select>\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"editor-actions\">\n        <button className=\"cancel-button\" onClick={onCancel}>Cancel</button>\n        <button className=\"save-button\" onClick={handleSave}>Save Changes</button>\n      </div>\n    </div>\n  );\n}\n\nexport default LanguageEditor;","import React, { useState, useEffect } from 'react';\nimport { spotifyService } from '../services/spotifyService';\nimport LanguageEditor from './LanguageEditor';\nimport './LanguageSorter.css';\n\nfunction LanguageSorter({ playlist, token, onBack }) {\n  const [loading, setLoading] = useState(true);\n  const [analyzing, setAnalyzing] = useState(false);\n  const [creating, setCreating] = useState(false);\n  const [error, setError] = useState(null);\n  const [playlistData, setPlaylistData] = useState(null);\n  const [createdPlaylists, setCreatedPlaylists] = useState([]);\n  const [showEditor, setShowEditor] = useState(false);\n  const [editedTracksByLanguage, setEditedTracksByLanguage] = useState(null);\n\n  useEffect(() => {\n    const analyzePlaylist = async () => {\n      try {\n        setLoading(true);\n        setAnalyzing(true);\n        \n        const data = await spotifyService.analyzePlaylist(playlist.id, token);\n        console.log(\"Playlist data received:\", data); \n        \n        setPlaylistData(data);\n        setLoading(false);\n        setAnalyzing(false);\n      } catch (error) {\n        console.error('Error analyzing playlist:', error);\n        setError('Failed to analyze playlist. Please try again.');\n        setLoading(false);\n        setAnalyzing(false);\n      }\n    };\n\n    analyzePlaylist();\n  }, [playlist.id, token]);\n\n  const handleCreatePlaylists = async () => {\n    try {\n      setCreating(true);\n      \n      const trackData = editedTracksByLanguage || playlistData.tracksByLanguage;\n      \n      const results = await spotifyService.createLanguagePlaylists(\n        token, \n        playlist.name, \n        trackData\n      );\n      \n      setCreatedPlaylists(results);\n      setCreating(false);\n    } catch (error) {\n      console.error('Error creating playlists:', error);\n      setError('Failed to create language playlists. Please try again.');\n      setCreating(false);\n    }\n  };\n\n  const handleEdit = () => {\n    setShowEditor(true);\n  };\n\n  const handleEditorSave = (newTracksByLanguage) => {\n    setEditedTracksByLanguage(newTracksByLanguage);\n    setShowEditor(false);\n  };\n\n  const handleEditorCancel = () => {\n    setShowEditor(false);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"language-sorter\">\n        <button className=\"back-button\" onClick={onBack}>Back to Playlists</button>\n        <h2>Analyzing \"{playlist.name}\"</h2>\n        <div className=\"loading-spinner\"></div>\n        <p>This may take a moment for larger playlists...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"language-sorter\">\n        <button className=\"back-button\" onClick={onBack}>Back to Playlists</button>\n        <div className=\"error\">{error}</div>\n      </div>\n    );\n  }\n\n  const displayTracksByLanguage = editedTracksByLanguage || playlistData.tracksByLanguage;\n\n  return (\n    <div className=\"language-sorter\">\n      <button className=\"back-button\" onClick={onBack}>Back to Playlists</button>\n      \n      <h2>Playlist: {playlist.name}</h2>\n      \n      {analyzing ? (\n        <div className=\"analyzing\">\n          <div className=\"loading-spinner\"></div>\n          <p>Analyzing languages in your playlist...</p>\n        </div>\n      ) : showEditor ? (\n        <LanguageEditor\n          tracksByLanguage={playlistData.tracksByLanguage}\n          onSave={handleEditorSave}\n          onCancel={handleEditorCancel}\n        />\n      ) : (\n        <>\n          <div className=\"language-summary\">\n            <h3>Languages Detected</h3>\n            <div className=\"language-list\">\n              {Object.entries(displayTracksByLanguage).map(([language, tracks]) => (\n                <div className=\"language-item\" key={language}>\n                  <span className=\"language-name\">{language}</span>\n                  <span className=\"language-count\">{tracks.length} tracks</span>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"language-actions\">\n              <button onClick={handleEdit} className=\"edit-button\">\n                Edit Languages\n              </button>\n            </div>\n          </div>\n          \n          {createdPlaylists.length > 0 ? (\n            <div className=\"created-playlists\">\n              <h3>Created Playlists</h3>\n              <ul className=\"playlist-results\">\n                {createdPlaylists.map(result => (\n                  <li key={result.playlistId}>\n                    <a \n                      href={`https://open.spotify.com/playlist/${result.playlistId}`} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                    >\n                      {result.playlistName}\n                    </a>\n                    <span className=\"track-count\">({result.trackCount} tracks)</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ) : (\n            <button \n              className=\"create-button\" \n              onClick={handleCreatePlaylists}\n              disabled={creating}\n            >\n              {creating ? 'Creating Playlists...' : 'Create Language Playlists'}\n            </button>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default LanguageSorter;","import React, { useState, useEffect } from 'react';\nimport PlaylistCard from './PlaylistCard';\nimport LanguageSorter from './LanguageSorter';\nimport { spotifyService } from '../services/spotifyService';\nimport './Dashboard.css';\n\nfunction Dashboard({ token }) {\n  const [playlists, setPlaylists] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedPlaylist, setSelectedPlaylist] = useState(null);\n\n  useEffect(() => {\n    const fetchPlaylists = async () => {\n      try {\n        setLoading(true);\n        const fetchedPlaylists = await spotifyService.getUserPlaylists(token);\n        setPlaylists(fetchedPlaylists);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching playlists:', error);\n        setError('Failed to load your playlists. Please try again.');\n        setLoading(false);\n      }\n    };\n\n    fetchPlaylists();\n  }, [token]);\n\n  const handlePlaylistSelect = (playlist) => {\n    setSelectedPlaylist(playlist);\n  };\n\n  const handleBack = () => {\n    setSelectedPlaylist(null);\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem('spotify_tokens');\n    window.location.href = '/';\n  };\n\n  if (loading) {\n    return <div className=\"loading\">Loading your playlists...</div>;\n  }\n\n  if (error) {\n    return <div className=\"error\">{error}</div>;\n  }\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"dashboard-header\">\n        <button className=\"logout-button\" onClick={handleLogout}>Logout</button>\n      </div>\n\n      {selectedPlaylist ? (\n        <LanguageSorter \n          playlist={selectedPlaylist}\n          token={token}\n          onBack={handleBack}\n        />\n      ) : (\n        <>\n          <h2>Your Playlists</h2>\n          <p>Select a playlist to sort by language:</p>\n          \n          <div className=\"playlists-grid\">\n            {playlists.map(playlist => (\n              <PlaylistCard \n                key={playlist.id}\n                playlist={playlist}\n                onSelect={handlePlaylistSelect}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Dashboard;","import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nexport const apiService = {\n  refreshToken: async (refreshToken) => {\n    try {\n      const response = await axios.get(`${API_URL}/spotify/refresh-token`, {\n        params: { refresh_token: refreshToken }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      throw error;\n    }\n  }\n};","// client/src/utils/auth.js\nimport { apiService } from '../services/apiService';\n\nexport const getTokenFromUrl = () => {\n  const hashParams = new URLSearchParams(window.location.search);\n  const params = {};\n  \n  for (const [key, value] of hashParams.entries()) {\n    params[key] = value;\n  }\n  \n  return params;\n};\n\nexport const setTokens = (accessToken, refreshToken, expiresIn) => {\n  const expiration = Date.now() + (expiresIn * 1000);\n  \n  localStorage.setItem('spotify_tokens', JSON.stringify({\n    access_token: accessToken,\n    refresh_token: refreshToken,\n    expires_in: expiresIn,\n    expiration\n  }));\n};\n\nexport const getTokens = () => {\n  const tokens = JSON.parse(localStorage.getItem('spotify_tokens'));\n  \n  if (!tokens) return null;\n  \n  // Check if token is expired\n  if (Date.now() > tokens.expiration) {\n    // Refresh token\n    refreshAccessToken(tokens.refresh_token);\n    return null;\n  }\n  \n  return tokens;\n};\n\nexport const refreshAccessToken = async (refreshToken) => {\n  try {\n    const response = await apiService.refreshToken(refreshToken);\n    \n    const { access_token, expires_in } = response;\n    \n    // Update tokens in localStorage\n    const tokens = JSON.parse(localStorage.getItem('spotify_tokens'));\n    const expiration = Date.now() + (expires_in * 1000);\n    \n    localStorage.setItem('spotify_tokens', JSON.stringify({\n      ...tokens,\n      access_token,\n      expires_in,\n      expiration\n    }));\n    \n    // Reload the page to use the new token\n    window.location.reload();\n  } catch (error) {\n    console.error('Failed to refresh token:', error);\n    // Clear tokens and redirect to login\n    localStorage.removeItem('spotify_tokens');\n    window.location.href = '/';\n  }\n};","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Login from './components/Login';\nimport Dashboard from './components/Dashboard';\nimport { getTokenFromUrl, setTokens } from './utils/auth';\nimport './App.css';\n\nfunction App() {\n const [token, setToken] = useState(null);\n const [refreshToken, setRefreshToken] = useState(null);\n const [expiresIn, setExpiresIn] = useState(null);\n\n  useEffect(() => {\n    const params = getTokenFromUrl();\n    \n    if (params.access_token) {\n      setToken(params.access_token);\n      setRefreshToken(params.refresh_token);\n      setExpiresIn(params.expires_in);\n      \n      setTokens(\n        params.access_token,\n        params.refresh_token,\n        params.expires_in\n      );\n      \n      window.history.pushState({}, null, '/');\n    } else {\n      const tokens = JSON.parse(localStorage.getItem('spotify_tokens'));\n      if (tokens && tokens.access_token) {\n        setToken(tokens.access_token);\n        setRefreshToken(tokens.refresh_token);\n        setExpiresIn(tokens.expires_in);\n      }\n    }\n  }, []);\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Spotify Language Playlist Sorter</h1>\n        </header>\n        \n        <main>\n          <Routes>\n            <Route \n              path=\"/\" \n              element={token ? <Dashboard token={token} /> : <Login />} \n            />\n          </Routes>\n        </main>\n        \n        <footer>\n          <p>© 2025 Spotify Language Playlist Sorter</p>\n        </footer>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport './animations.css'; \nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}